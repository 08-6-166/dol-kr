:: Cosmetics Lock

<<set $outside to 0>><<effects>><<set $lock to 0>>

<<if currentSkillValue('skulduggery') gte $lock>>
	<span class="green">이 자물쇠는 아주 따기 쉬워 보인다.</span>
	<br><br>

	<<link [[자물쇠를 딴다 (0:10)|Cosmetics Store]]>><<pass 10>><<crimeup 1>><</link>><<crime>>
	<br>
<<else>>
	<span class="red">이 자물쇠는 당신의 자물쇠따기 능력 바깥의 물건이다.</span>
	<<skulduggeryrequired>>
	<br><br>
<</if>>

<<link [[떠난다|Shopping Centre Top]]>><</link>>
<br>

:: Cosmetics Store
<<set $outside to 0>><<set $location to "shopping_centre">><<effects>>

당신은 화장품 가게에 있다. 여러 종류의 알록달록한 튜브, 병, 상자들로 가득 찬 선반들이 당신 앞에 서 있다.
<br><br>
<<link [[립스틱을 본다|Cosmetics Lipstick]]>><</link>><br>
<<link [[아이섀도우를 본다|Cosmetics Eyeshadow]]>><</link>><br>
<<link [[마스카라를 본다|Cosmetics Mascara]]>><</link>><br>
<<link [[머리 염색약을 본다|Cosmetics Dyes]]>><</link>><br>
<<link [[떠난다|Shopping Centre Top]]>><</link>>

:: Cosmetics Lipstick
<<CosmeticsGenericDepartment "lipstick" "lipstick" "lipsticks" "lipstick" "" "#FF0000" 1000 "Cosmetics Lipstick" "A bunch of colourful lipsticks stand on a shelf." true true 20 `setup.colours.lipstick.map(c=>c.variable)`>>

:: Cosmetics Eyeshadow
<<CosmeticsGenericDepartment "eyeshadow" "eyeshadow" "eyeshadows" "eyeshadow" "" "#FF0000" 1500 "Cosmetics Eyeshadow" "Small boxes with sparkly eye shadows lay before you." true true 20 `setup.colours.eyeshadow.map(c=>c.variable)`>>

:: Cosmetics Mascara
<<CosmeticsGenericDepartment "mascara" "mascara" "mascaras" "mascara" "" "#FF0000" 1500 "Cosmetics Mascara" "There's a dozen mascaras laying before you. They're all black though." true true 20 `setup.colours.mascara.map(c=>c.variable)`>>

:: Cosmetics Dyes
<<CosmeticsGenericDepartment "hairdye" "hair dye" "hair dyes" "hair" "colour-hair" "#FD6064" 4000 "Cosmetics Dyes" "You come to the shelf with hair dyes." false true 1 `setup.colours.hair.filter(c=>c.dye).map(c=>c.variable)`>>

:: Cosmetics Store Widgets [widget]
<<widget "CosmeticsGenericDepartment">>
<<if _args.length < 13>>
<div class="red">Error in passage "Cosmetics Generic Department". Missing arguments.<br><<print _args>></div>
<</if>>

<<set _itemType = _args[0]>>
<<set _itemSingular = _args[1]>>
<<set _itemPlural = _args[2]>>
<<set _cssClassOuter = _args[3]>>
<<set _cssClassInner = _args[4]>>
<<set _baseColour = _args[5]>>
<<set _price = _args[6]>>
<<set _passageCurrent = _args[7]>>
<<set _textIntro = _args[8]>>
<<set _canUseNow = _args[9]>>
<<set _isConsumable = _args[10]>>
<<set _usesPerBuy = _args[11]>>
<<set _availableColours = _args.slice(12)>>
<<if _availableColours.length === 1 && Array.isArray(_availableColours)>>
	<<set _availableColours = _availableColours[0]>>
<</if>>

_textIntro
<<if _isConsumable isnot true>>
	<<if $makeup.owned[_itemType].length > 0>>
		<br>
		You already own _itemPlural of the following colours:
		<<for _i, _colour range $makeup.owned[_itemType]>>
			<span class="grey-shadow"><span @class="_cssClassOuter + '-' + _colour.replace(/ /g, '-')"><span @class="_cssClassInner"><span @style="'color:' + _baseColour + ';'"><<print setup.colourName(_colour)>></span></span></span></span>
			<<if _i < $makeup.owned[_itemType].length - 1>>, <</if>>
		<</for>>.
	<</if>>
<<else>>
	<<set _owned = $makeup.owned[_itemType].filter(x => x.count > 0)>>
	<<if _owned.length > 0>>
		<br>
		You already own _itemPlural of the following colours:
		<<for _i, _item range _owned>>
			<<if _item.count > 0>>
				<span class="grey-shadow"><span @class="_cssClassOuter + '-' + _item.colour.replace(/ /g, '-')"><span @class="_cssClassInner"><span @style="'color:' + _baseColour + ';'"><<print setup.colourName(_item.colour)>></span></span></span></span>
				&nbsp;×&nbsp;_item.count
				<<if _i < _owned.length - 1>>, <</if>>
			<</if>>
		<</for>>.
	<</if>>
<</if>>

<br><br>

<<if _isConsumable == false>>
	<<set _availableColours = _availableColours.filter(x => !$makeup.owned[_itemType].includes(x))>>
<</if>>
<<if _availableColours.length == 0>>
	You have collected all available colours of _itemPlural, there's nothing left for you to buy.
	<br><br>
<<else>>
	Each _itemSingular costs <<printmoney _price>><<if _usesPerBuy > 1>> and has _usesPerBuy uses<</if>>.
	<br>
	<<if $cosmeticsChoice is undefined>>
		<<set $cosmeticsChoice = _availableColours[0]>>
	<</if>>
	<<for _i, _colour range _availableColours>>
		<label><span class="grey-shadow"><span @class="_cssClassOuter + '-' + _colour.replace(/ /g, '-')"><span @class="_cssClassInner"><span @style="'color:' + _baseColour + ';'"><<print setup.colourName(_colour)>></span></span></span></span>&nbsp;<<print '<<radiobutton "$cosmeticsChoice" "'+_colour+'" ' + ($cosmeticsChoice is _colour ? "checked" : "") + '>>'>></label> |
	<</for>>

	<br><br>
	<<if $money gte _price or $daystate is "night">>
		<<set _buy = $daystate == "night" ? "Steal" : "Buy">>
		<<if _isConsumable == true>>
			<<set _usesText = _usesPerBuy > 1 ? " ("+_usesPerBuy+" uses)" : "">>
			<<link [[_buy+_usesText|_passageCurrent]]>><<addConsumableCosmetics _itemType $cosmeticsChoice _usesPerBuy>><<if $daystate is "night">><<crimeup _price/100>><<else>><<set $money -= _price>><</if>><</link>><<if $daystate is "night">><<crime>><</if>><br>
			<<if _canUseNow == true>>
				<<link [[_buy+_usesText+" and apply"+(_usesPerBuy > 1 ? " one" : "")+" right now"|_passageCurrent]]>><<addConsumableCosmetics _itemType $cosmeticsChoice _usesPerBuy-1>><<set $makeup[_itemType] = $cosmeticsChoice>><<if $daystate is "night">><<crimeup _price/100>><<else>><<set $money -= _price>><</if>><</link>><<if $daystate is "night">><<crime>><</if>><br>
			<</if>>
		<<else>>
			<<link [[_buy+" and send home"|_passageCurrent]]>><<set $makeup.owned[_itemType].push($cosmeticsChoice)>><<if $daystate is "night">><<crimeup _price/100>><<else>><<set $money -= _price>><</if>><</link>><<if $daystate is "night">><<crime>><</if>><br>
			<<if _canUseNow == true>>
				<<link [[_buy+" and use right now"|_passageCurrent]]>><<set $makeup.owned[_itemType].push($cosmeticsChoice)>><<set $makeup[_itemType] = $cosmeticsChoice>><<if $daystate is "night">><<crimeup _price/100>><<else>><<set $money -= _price>><</if>><</link>><<if $daystate is "night">><<crime>><</if>><br>
			<</if>>
		<</if>>
	<<else>>
		<span class="purple">You can't afford the purchase.</span><br><br>
	<</if>>
<</if>>
<<link [[Go back|Cosmetics Store]]>><<unset $cosmeticsChoice>><</link>>
<</widget>>

<!-- for buying consumable makeup stuff. Usage <<addConsumableCosmetics "lipstick" "red" 20>> -->
<<widget addConsumableCosmetics>><<script>>
	let _args = V.args;
	let $makeup = V.makeup;
	let _itemType = _args[0];
	let _colour = _args[1];
	let _count = _args[2];

	let done = false;
	for (let i = 0; i < $makeup.owned[_itemType].length; i++) {
		if ($makeup.owned[_itemType][i].colour == _colour) {
			$makeup.owned[_itemType][i].count += _count;
			done = true;
			break;
		}
	}
	if (!done) {
		$makeup.owned[_itemType].push({"colour": _colour, "count": _count});
	}
<</script>><</widget>>
